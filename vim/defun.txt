(defun and(x,y) (cond(x (cond(y 't)('t ()))) ('t '())))

(defun not(x) (cond(x '()) ('t 't)))

(defun append(x y) (cond((null x) y) ('t (cons(car x)(append(cdr x)y)))))

(defun pair(x y) (cond((and(null x) (null y)) '())
                      ((and(not(atom x)) (not(atom y))) (cons(list(car x)(car y)) (pair(cdr x)(cdr y))))))

(defun assoc(x y) (cond((eq(caar y) x) (cadar y)) ('t (assoc x (cdr y)))))

(defun subst(x y z) (cond((atom z) (cond((eq z y) x) ('t z))) ('t (cons(subst x y (car z)) (subst x y (cdr z))))))

(defun eval(e a)
 (cond
  ((atom e) (assoc e a))
  ((atom (car e))
   (cond
    ((eq (car e) 'quote) (cadr e))
    ((eq (car e) 'atom)  (atom (eval(cadr e) a)))
    ((eq (car e) 'eq) (eq (eval(cadr e) a)
                      (eval(caddr e) a)))
    ((eq (car e) 'car) (car (eval(cadr e) a)))
    ((eq (car e) 'cdr) (cdr (eval(cadr e) a)))
                      (eval(caddr e) a)))
  ((eq(car e) 'cond) (evcon(cdr e) a))
  ('t (eval(cons(assoc(car e) a)
            (cdr e))
       a))))





命令   Num 实际
名称       命令
|g0|	N  g0		至屏幕行第一个字符 (当行回绕时和 "0" 不同)
|g^|	N  g^		至屏幕行第一个非空白字符 (当行回绕时和 "^" 不同)
|g$|	N  g$		至屏幕行最后一个字符 (当行回绕时和 "$" 不同)
|gm|	N  gm		至屏幕行中点

|-|	N  -		上移 N 行，至第一个非空白字符
|+|	N  +		下移 N 行，至第一个非空白字符 (亦: CTRL-M 和 <CR>)
|_|	N  _		下移 N - 1 行，至第一个非空白字符
|N%|	N  %		至全文件行数百分之 N 处。必须给出 N，否则是 |%| 命令。
|gk|	N  gk		上移 N 屏幕行 (回绕行时不同于 "k")
|gj|	N  gj		下移 N 屏幕行 (回绕行时不同于 "j")

|ge|	N  ge		向后至第 N 个单词词尾
|gE|	N  gE		向后至第 N 个空白隔开的字串 |WORD| 的词尾

|[(|	N  [(		向后至第 N 个未闭合的 '('
|[{|	N  [{		向后至第 N 个未闭合的 '{'
|[m|	N  [m		向后至第 N 个方法 (method) 的开始 (用于 Java)
|[M|	N  [M		向后至第 N 个方法的结束 (Method)  (用于 Java)
|])|	N  ])		向前至第 N 个未闭合的 ')'
|]}|	N  ]}		向前至第 N 个未闭合的 '}'
|]m|	N  ]m		向前至第 N 个方法 (method) 的开始 (用于 Java)
|]M|	N  ]M		向前至第 N 个方法的结束 (Method)  (用于 Java)
|[#|	N  [#		向后至第 N 个未闭合的 "#if" 或 "#else"
|]#|	N  ]#		向前至第 N 个未闭合的 "#else" 或 "#endif"
|[star|	N  [*		向后至第 N 个注释的开始 "/*"
|]star|	N  ]*		向前至第 N 个注释的结束 "*/"

|/<CR>|	N  /<CR>	向前重复上次查找
|?<CR>|	N  ?<CR>	向后重复上次查找
|gstar|	N  g*		同 "*"，但也查找部分匹配
|g#|	N  g#		同 "*"，但也查找部分匹配
|gd|	   gd		至光标下标识符的局部声明 (goto declaration)
|gD|	   gD		至光标下标识符的全局声明 (goto Declaration)

|pattern|		查找模式中的特殊字符
		    匹配单个标定范围中的字符	[a-z]	\[a-z]
		匹配单个不在标定范围中的字符	[^a-z]	\[^a-z]
			  匹配一个标识符字符	\i	\i
			    同上但不包括数字	\I	\I
			  匹配一个关键字字符	\k	\k
			    同上但不包括数字	\K	\K
			  匹配一个文件名字符	\f	\f
			    同上但不包括数字	\F	\F
			匹配一个可显示的字符	\p	\p
			    同上但不包括数字	\P	\P
			    匹配一个空白字符	\s	\s
			  匹配一个非空白字符	\S	\S
				  匹配 <Esc>	\e	\e
				  匹配 <Tab>	\t	\t
				   匹配 <CR>	\r	\r
				   匹配 <BS>	\b	\b
		   匹配 0 或多个前面的匹配原	*	\*
		   匹配 1 或多个前面的匹配原	\+	\+
		  匹配 0 或 1 个前面的匹配原	\=	\=
		  匹配 2 至 5 个前面的匹配原	\{2,5}	\{2,5}
			隔开两种可替换的匹配	\|	\|
			组合模式为单个匹配原	\(\)	\(\)

|`0|	   `{0-9}	至 Vim 上次退出的位置
|`quote|   `"		至上次编辑此文件的位置
|`[|	   `[		至上次被操作或放置的文本的开始
|`]|	   `]		至上次被操作或放置的文本的结尾
|`<|	   `<		至 (前次) 可视区域的开始
|`>|	   `>		至 (前次) 可视区域的结尾
|`.|	   `.		至当前文件最后被改动的位置
|:marks|  :marks	列出活动的标记
|CTRL-O|  N  CTRL-O	跳转到跳转表中第 N 个较早的位置
|CTRL-I|  N  CTRL-I	跳转到跳转表中第 N 个较晚的位置
|:ju|	  :ju[mps]	列出跳转表

|:ts|	   :ts[elect][!] [tag]	列出匹配的标签并选择其中一个跳转
|:tags|	   :tags		显示标签列表
|:ptag|	   :pt[ag] {tag}	打开一个显示 {tag} 标签的预览窗口

以下仅当 'wrap' 选项关闭时生效:
|zh|		N  zh		屏幕右滚 N 个字符
|zl|		N  zl		屏幕左滚 N 个字符
|zH|		N  zH		屏幕右滚半个屏宽
|zL|		N  zL		屏幕左滚半个屏宽

|gI|	N  gI	在第一栏中插入文本 (N 次)
|v_b_I|    I	在所有选中的行之前插入相同的文本
|v_b_A|	   A	在所有选中的行之后添加相同的文本

离开插入模式:
|i_CTRL-O|	CTRL-O {command}  执行命令 {command} 并回到插入模式

*Q_ss*		插入模式特殊键
|i_CTRL-V|	CTRL-V {char}..	  按本义插入字符，或插入十进制数的字节值
|i_CTRL-A|	CTRL-A		  插入上次插入的文本
|i_CTRL-@|	CTRL-@		  插入上次插入的文本并结束插入模式
|i_CTRL-R|	CTRL-R {0-9a-z%#:.-="}	插入寄存器的内容
|i_CTRL-T|	CTRL-T		  在当前行首插入一个移位宽度的缩进
|i_CTRL-D|	CTRL-D		  从当前行首删除一个移位宽度的缩进
|i_0_CTRL-D|	0 CTRL-D	  删除当前行的所有缩进
|i_^_CTRL-D|	^ CTRL-D	  删除当前行的所有缩进，恢复下一行的缩进

|:dig|	   :dig[raphs]		显示当前二合字母列表
|:dig|	   :dig[raphs] {char1}{char2} {number} ...加入一个或多个二合字母到上述列表中

在插入或命令行方式下:
|i_CTRL-K|	CTRL-K {char1} {char2} 键入二合字母
|i_digraph|	{char1} <BS> {char2} 若 'digraph' 选项被置位则键入二合字母

|quote|	  "{char}	在接下来的删除、抽出或放置命令中使用寄存器 {char}
|:reg|	  :reg {arg}	显示寄存器 {arg} 的内容
|gp|	  N  gp		同 p，但将光标留在新文本之后
|gP|	  N  gP		同 P，但将光标留在新文本之后
|~|	  N  ~		翻转 N 个字符的大小写并前进光标
|v_u|	     {visual}u	改高亮的文本为小写
|v_U|	     {visual}U	改高亮的文本为大写
|:ce|	  :[range]ce[nter] [width]将范围 [range] 包括的行居中对齐
|:le|	  :[range]le[ft] [indent]将范围 [range] 中的行靠左对齐 (使用 [indent])
|:ri|	  :[range]ri[ght] [width]将范围 [range] 中的行靠右对齐

|v_!|	      {visual}!{command}<CR>    将高亮的行用命令 {command} 过滤
|v_=|	      {visual}=                 将高亮的行用 'equalprg' 过滤 // MMMMM
|:s|    :[range]s[ubstitute] [g][c]     以新的范围和选项重复上一次的 ":s" 命令
|&|	      &		                不带选项在当前行上重复上一次的 ":s" 命令
|:ret|	   :[range]ret[ab][!] [tabstop] 置 'tabstop' 为新值并依据此值调整空白字符

|v_aW|	   N  aW	选择 "一个字串"                   (WORD)
|v_iW|	   N  iW	选择 "内含字串"
|v_as|	   N  as	选择 "一个句子"                   (sentence)
|v_is|	   N  is	选择 "内含句子"
|v_ap|	   N  ap	选择 "一个段落"                   (paragraph)
|v_ip|	   N  ip	选择 "内含段落"
|v_ab|	   N  ab	选择 "一个块" (从 "[(" 至 "])")   (block)
|v_ib|	   N  ib	选择 "内含块" (从 "[(" 到 "])")
|v_aB|	   N  aB	选择 "一个大块" (从 "[{" 到 "]}") (Block)
|v_iB|	   N  iB	选择 "内含大块" (从 "[{" 到 "]}")
|v_a>|	   N  a>	选择 "一个 <> 块"
|v_i>|	   N  i>	选择 "内含 <> 块"
|v_at|	   N  at	选择 "一个标签块" (从 <aaa> 到 </aaa>) (tag)
|v_it|	   N  it	选择 "内含标签块" (从 <aaa> 到 </aaa>)
|v_a'|	   N  a'	选择 "一个单引号字符串"
|v_i'|	   N  i'	选择 "内含单引号字符串"
|v_aquote| N  a"	选择 "一个双引号字符串"
|v_iquote| N  i"	选择 "内含双引号字符串"
|v_a`|	   N  a`	选择 "一个反引号字符串"
|v_i`|	   N  i`	选择 "内含反引号字符串"

|@@|	   N  @@	重复上次的 @{a-z} 操作 (N 次)
|:@|	   :@{a-z}	将寄存器 {a-z} 的内容当作 Ex 命令来执行
|:@@|	   :@@		重复上次的 :@{a-z} 操作
|:g|	   :[range]g[lobal]/{pattern}/[cmd]     对 [range] 内所有匹配 {pattern} 的行执行Ex 命令 [cmd] (缺省: ":p")。
|:g|	   :[range]g[lobal]!/{pattern}/[cmd]    对 [range] 内所有_不_匹配 {pattern} 的行执行Ex 命令 [cmd] (缺省: ":p")。
|:so|	   :so[urce] {file}                     从文件 {file} 读入 Ex 命令。
|:so|	   :so[urce]! {file}                    从文件 {file} 读入 Vim 命令。
|:sl|	   :sl[eep] [sec]                       在 [sec] 秒钟内任何事也不做
|gs|	   N  gs	                        睡 N 秒 (goto sleep)

|:map|	     :ma[p] {lhs} {rhs}	  在普通及可视模式下将 {rhs} 映射为 {lhs}。
|:map!|	     :ma[p]! {lhs} {rhs}  在插入及命令行模式下将 {rhs} 映射为 {lhs}。
|:noremap|   :no[remap][!] {lhs} {rhs}      同 ":map"，但不对 {rhs} 重新映射。
|:map_l|     :ma[p] [lhs]	  列出普通及可视模式下以 [lhs] 开始的映射。
|:map_l!|    :ma[p]! [lhs]	  列出插入及命令行模式下以 [lhs] 开始的映射。
|:cmap|	     :cmap/:cunmap/:cnoremap 同 ":map!"/":unmap!"/":noremap!"， 但仅作用于命令行模式 (Command-line)
|:imap|	     :imap/:iunmap/:inoremap 同 ":map!"/":unmap!"/":noremap!"， 但仅作用于插入模式   (Insert)
|:nmap|	     :nmap/:nunmap/:nnoremap 同 ":map"/":unmap"/":noremap"， 但仅作用于普通模式   (Normal)
|:vmap|	     :vmap/:vunmap/:vnoremap 同 ":map"/":unmap"/":noremap"， 但仅作用于可视模式   (Visual)
|:omap|	     :omap/:ounmap/:onoremap 同 ":map"/":unmap"/":noremap" 但仅作用于操作符等待模式 (Operator-pending)
|:mapc|      :mapc[lear]	  清除普通及可视模式下的映射
|:mapc|      :mapc[lear]!	  清除插入及命令行模式下的映射
|:imapc|     :imapc[lear]	  清除插入模式下的映射
|:vmapc|     :vmapc[lear]	  清除可视模式下的映射
|:omapc|     :omapc[lear]	  清除操作符等待模式下的映射
|:nmapc|     :nmapc[lear]	  清除普通模式下的映射
|:cmapc|     :cmapc[lear]	  清除命令行模式下的映射
|:mkexrc|    :mk[exrc][!] [file]  将当前的键盘映射、缩写及设置写入文件 [file] (缺省: ".exrc"；使用 ! 覆盖文件) // MMMMM
|:mkvimrc|   :mkv[imrc][!] [file] 同 ":mkexrc"，但缺省为 ".vimrc"
|:mksession| :mks[ession][!] [file] 同 ":mkvimrc"，但同时存储当前文件、窗口等信息，使得用户将来可以继续当前对话。

|:abbreviate|	:ab[breviate] {lhs} {rhs}  为 {rhs} 加入缩写 {lhs}
|:abbreviate|	:ab[breviate] {lhs}	   显示以 {lhs} 开始的缩写
|:abbreviate|	:ab[breviate]		   显示所有缩写
|:unabbreviate|	:una[bbreviate] {lhs}	   删除 {lhs} 对应的缩写
|:noreabbrev|	:norea[bbrev] [lhs] [rhs]  同 ":ab"，但不对 [rhs] 重映射
|:iabbrev|	:iab/:iunab/:inoreab	   同 ":ab"，但仅适用于插入模式
|:cabbrev|	:cab/:cunab/:cnoreab	   同 ":ab"，但仅适用于命令行模式
|:abclear|	:abc[lear]		   清除所有缩写
|:cabclear|	:cabc[lear]		   清除所有命令行模式缩写
|:iabclear|	:iabc[lear]		   清除所有插入模式缩写

|:set|		:se[t] {option}		  置位布尔选项 (开启)， 显示字符串或数值选项。
|:set|		:se[t] no{option}	  复位布尔选项 (关闭)。
|:set|		:se[t] inv{option}	  逆转布尔选项的值。
|:set|		:se[t] {option}={value}	  设置字符串/数值选项的值为 {value}。
|:set|		:se[t] {option}+={value}  将 {value} 附加到字符串选项里，将 {value} 加到数值选项上
|:set|		:se[t] {option}-={value}  从 {value} 从字符串选项里删除，从数值选项里减去 {value}
|:set|		:se[t] {option}?	  显示 {option} 的值。
|:set|		:se[t] {option}&	  重置 {option} 为其缺省值。
|:setlocal|	:setl[ocal]		  同 ":set"，但对局部选项只设定局部值
|:setglobal|	:setg[lobal]		  同 ":set"，但对局部选项设定其全局值
|:fix|		:fix[del]		  根据 't_kb' 的值设置 't_kD'。
|:options|	:opt[ions]		  打开一个新窗口，用来参看并设置选项。 选项们以功能分组。有单行的解释，并有指向帮助的链接。 // MMMMM

settings
'columns'	  'co'	    显示屏幕的列数
'cscopepathcomp'  'cspc'    显示路径多少部分
'cscopeprg'	  'csprg'   执行 cscope 的命令
'cscopequickfix'  'csqf'    用 quickfix 窗口得到 cscope 的结果
'cscopetag'	  'cst'     用 cscope 处理标签命令
'cscopetagorder'  'csto'    决定 ":cstag" 的搜索顺序
'cscopeverbose'   'csverb'  增加 cscope 数据库时给出消息
'cursorcolumn'	  'cuc'     高亮光标所在屏幕列
'define'	  'def'     查找宏定义所使用的模式
'dictionary'	  'dict'    关键字自动补全所用的文件名 // @@@@@
'digraph'	  'dg'	    允许插入模式时输入二合字母
'directory'	  'dir'     交换文件所用的目录名列表
'display'	  'dy'	    如何显示文本的标志位列表
'encoding'	  'enc'     内部使用的编码方式
'endofline'	  'eol'     文件最后一行写入换行符 <EOL>
'equalalways'	  'ea'	    自动使所有窗口大小相同
'equalprg'	  'ep'	    "=" 命令使用的外部命令
'expandtab'	  'et'	    键入 <Tab> 时使用空格
'exrc'		  'ex'	    在当前目录里读入 .vimrc 和 .exrc
'fileencoding'	  'fenc'    多字节文本的文件编码
'fileencodings'   'fencs'   参与自动检测的字符编码
'fileformat'	  'ff'	    文件输入输出使用的格式
'fileformats'	  'ffs'     参与自动检测的 'fileformat' 的格式
'filetype'	  'ft'	    自动命令使用的文件类型
'fillchars'	  'fcs'     显示特殊项目所使用的字符
'foldclose'	  'fcl'     当光标离开时关闭折叠
'foldcolumn'	  'fdc'     设定指示折叠的列宽度
'foldenable'	  'fen'     设置为显示所用打开的折叠
'foldexpr'	  'fde'     当 'foldmethod' 为 "expr" 时使用的表达式
'foldignore'	  'fdi'     当 'foldmethod' 为 "indent" 时忽略的行
'foldlevel'	  'fdl'     当折叠级别高于此值时关闭折叠
'foldlevelstart'  'fdls'    开始编辑文件的 'foldlevel'
'foldmarker'	  'fmr'     当 'foldmethod' 为 "marker" 时的标志
'foldmethod'	  'fdm'     折叠的类型
'foldminlines'	  'fml'     折叠关闭所需的最少行数
'foldnestmax'	  'fdn'     最大折叠深度
'foldopen'	  'fdo'     打开折叠所使用的命令
'foldtext'	  'fdt'     显示关闭的折叠所用的表达式
'formatlistpat'   'flp'     识别列表头部的模式
'formatoptions'   'fo'	    自动排版完成的方式
'formatprg'	  'fp'	    "gq" 命令使用的外部程序
'formatexpr'	  'fex'     "gq" 命令使用的表达式
'grepprg'	  'gp'	    ":grep" 使用的程序
'guicursor'	  'gcr'     GUI: 光标形状和闪烁的设置
'guifont'	  'gfn'     GUI: 使用的字体名
'guifontset'	  'gfs'     GUI: 使用的多字节字体名
'guifontwide'	  'gfw'     双倍宽度字符的字体名列表
'guiheadroom'	  'ghr'     GUI: 用于窗口装饰的像素空间
'guioptions'	  'go'	    GUI: 使用的部件和选项
'guipty'		    GUI: ":!" 命令尝试仿终端
'guitablabel'	  'gtl'     GUI: 标签页定制的标签
'guitabtooltip'   'gtt'     GUI: 标签页定制的工具提示
'helpfile'	  'hf'	    主帮助文件的完整路径名
'helpheight'	  'hh'	    新帮助窗口的最小高度
'helplang'	  'hlg'     首选帮助语言
'hlsearch'	  'hls'     高亮最近的匹配搜索模式
'history'	  'hi'	    记住的命令行的行数
'iconstring'		    Vim 图标文本所用的字符串
'ignorecase'	  'ic'	    搜索模式时忽略大小写
'imactivatekey'   'imak'    激活 X 输入方法 (X input method) 的键击
'include'	  'inc'     查找包含文件所使用的模式
'includeexpr'	  'inex'    处理包含文件行所使用的表达式
'incsearch'	  'is'	    输入搜索模式时同时高亮部分的匹配
'indentexpr'	  'inde'    得到一行的缩进位置的表达式
'indentkeys'	  'indk'    使用 'indentexpr' 时启动缩进的键
'infercase'	  'inf'     关键字自动补全的匹配调整大小写
'isfname'	  'isf'     文件和路径名可用的字符
'isident'	  'isi'     标识符可用的字符
'iskeyword'	  'isk'     关键字可用的字符
'isprint'	  'isp'     可显示的字符
'joinspaces'	  'js'	    连接命令在句号之后加两个空格
'key'			    加密密钥
'keywordprg'	  'kp'	    "K" 命令所使用的程序
'langmenu'	  'lm'	    菜单使用的语言
'laststatus'	  'ls'	    当最近的窗口有状态行时提示
'lazyredraw'	  'lz'	    执行宏时不重画
'linebreak'	  'lbr'     在空白处回绕长行
'lines'			    显示屏幕的行数
'linespace'	  'lsp'     字符之间的像素行数
'lisp'			    自动 lisp 缩进
'lispwords'	  'lw'	    改变 lisp 缩进方式的单词
'list'			    显示 <Tab> 和 <EOL>
'listchars'	  'lcs'     list 模式下显示用的字符
'loadplugins'	  'lpl'     启动时调入插件脚本
'magic'			    改变搜索模式所用的特殊字符
'makeef'	  'mef'     ":make" 所用的错误文件名
'makeprg'	  'mp'	    ":make" 命令所用的程序
'matchpairs'	  'mps'     "%" 能匹配的字符对
'matchtime'	  'mat'     显示匹配括号的时间 (以十分之一秒计)
'maxfuncdepth'	  'mfd'     用户函数的最大递归深度
'maxmapdepth'	  'mmd'     映射的最大递归深度
'menuitems'	  'mis'     菜单可用的最大项目数
'modeline'	  'ml'	    在文件开头或结尾识别模式行
'modelines'	  'mls'     模式行的检查行数
'modifiable'	  'ma'	    可否修改文本
'modified'	  'mod'     缓冲区已被修改
'more'			    全屏显示时暂停列表
'mouse'			    允许使用鼠标点击
'mousefocus'	  'mousef'  键盘焦点追随鼠标点击
'mousehide'	  'mh'	    输入时隐藏鼠标指针
'mousemodel'	  'mousem'  改变鼠标按钮的含义
'mouseshape'	  'mouses'  不同模式下改变鼠标指针的形状
'mousetime'	  'mouset'  鼠标双击之间的最大时间
'nrformats'	  'nf'	    CTRL-A 命令识别的数字格式
'number'	  'nu'	    行前显示行号
'numberwidth'	  'nuw'     行号使用的列数
'omnifunc'	  'ofu'     文件类型特定补全使用的函数
'operatorfunc'	  'opfunc'  |g@| 操作符调用的函数
'osfiletype'	  'oft'     操作系统特定的文件格式信息
'paragraphs'	  'para'    分隔段落的 nroff 宏
'paste'			    允许粘贴文本
'pastetoggle'	  'pt'	    切换 'paste' 的键盘代码
'patchmode'	  'pm'	    保留文件最老的版本
'path'		  'pa'	    "gf" 等命令搜索用的目录列表
'preserveindent'  'pi'	    重排时保持原有的缩进结构
'previewheight'   'pvh'     预览窗口的高度
'previewwindow'   'pvw'     标识预览窗口
'printencoding'   'penc'    用于打印的编码方式
'pumheight'	  'ph'	    弹出窗口的最大高度
'quoteescape'	  'qe'	    字符串里使用的转义字符
'readonly'	  'ro'	    禁止写入缓冲区
'redrawtime'	  'rdt'     'hlsearch' 和 |:match| 高亮的超时
'remap'			    允许映射可以递归调用
'revins'	  'ri'	    字符插入会反向进行
'rightleft'	  'rl'	    窗口为从右到左模式
'rightleftcmd'	  'rlc'     从右到左模式工作的编辑命令
'ruler'		  'ru'	    标尺，在状态行里显示光标的行号和列号
'rulerformat'	  'ruf'     定制标尺格式
'runtimepath'	  'rtp'     用于运行时文件的目录列表
'selection'	  'sel'     使用何种选择方式
'selectmode'	  'slm'     何时使用选择模式而不是可视模式
'sessionoptions'  'ssop'    :mksession 的选项
'shell'		  'sh'	    使用外部命令的 shell 程序名字
'shellcmdflag'	  'shcf'    执行命令所使用的 shell 的参数
'shellpipe'	  'sp'	    把 ":make" 结果输出到错误文件的字符串
'shiftround'	  'sr'	    缩进列数对齐到 shiftwidth 的整数倍
'shiftwidth'	  'sw'	    (自动) 缩进使用的步进单位，以空白数目计
'showbreak'	  'sbr'     用于提示回绕行开始的字符串
'showcmd'	  'sc'	    在状态行里显示 (部分) 命令
'showfulltag'	  'sft'     自动补全标签时显示完整的标签匹配模式
'showmatch'	  'sm'	    插入括号时短暂跳转到匹配的括号
'showmode'	  'smd'     在状态行上显示当前模式的消息
'showtabline'	  'stal'    是否显示标签页行
'sidescroll'	  'ss'	    横向滚动的最少列数
'sidescrolloff'   'siso'    在光标左右最少出现的列数
'smartcase'	  'scs'     模式中有大写字母时不忽略大小写
'smartindent'	  'si'	    C 程序智能自动缩进
'smarttab'	  'sta'     插入 <Tab> 时使用 'shiftwidth'
'softtabstop'	  'sts'     编辑时 <Tab> 使用的空格数
'spell'			    打开拼写检查
'spellcapcheck'   'spc'     定位句子尾部的模式
'spellfile'	  'spf'     |zg| 和 |zw| 保存单词的文件
'spelllang'	  'spl'     拼写检查使用的语言
'spellsuggest'	  'sps'     提供拼写校正建议的方法
'splitbelow'	  'sb'	    分割窗口时新窗口在当前窗口之下
'splitright'	  'spr'     新窗口在当前窗口之右
'startofline'	  'sol'     命令移动光标到行的第一个非空白
'statusline'	  'stl'     状态行的定制格式
'suffixes'	  'su'	    多个匹配所忽略的后缀
'suffixesadd'	  'sua'     搜索文件时附加的后缀
'swapfile'	  'swf'     缓冲区是否使用交换文件
'swapsync'	  'sws'     和交换文件同步的方式
'synmaxcol'	  'smc'     寻找语法项目的最大列数
'syntax'	  'syn'     读入当前缓冲区的语法
'tabstop'	  'ts'	    <Tab> 在文件里使用的空格数
'tabline'	  'tal'     终端标签页行的定制格式
'tabpagemax'	  'tpm'     |-p| 和 "tab all" 的最大标签页数
'tagbsearch'	  'tbs'     标签文件里用二分法查找
'taglength'	  'tl'	    标签里的有效字符数
'tagrelative'	  'tr'	    标签文件里的文件名是相对路径
'tags'		  'tag'     标签命令使用的文件名列表
'tagstack'	  'tgst'    把标签推入标签栈
'term'			    终端名
'termbidi'	  'tbidi'   终端支持双向文本
'termencoding'	  'tenc'    终端使用的编码方式
'textwidth'	  'tw'	    插入文本的最大宽度
'thesaurus'	  'tsr'     关键字自动补全所用的同义词字典
'tildeop'	  'top'     波浪命令 "~" 以操作符方式工作
'timeout'	  'to'	    映射和键盘代码等待超时
'timeoutlen'	  'tm'	    超时时间 (以毫秒计)
'title'			    让 Vim 设置窗口标题
'titlelen'		    用于窗口标题的 'columns' 比例
'titleold'		    旧的标题，用于退出时恢复
'titlestring'		    用于 Vim 窗口标题的字符串
'toolbar'	  'tb'	    GUI: 工具栏显示何种项目
'toolbariconsize' 'tbis'    工具栏图标的大小 (只适用于 GTK 2)
'ttimeout'		    映射等待超时
'ttimeoutlen'	  'ttm'     键盘代码超时时间 (以毫秒计)
'ttybuiltin'	  'tbi'     在外部 termcap 之前先用内建的 termcap
'ttyfast'	  'tf'	    指示一个快速的终端连接
'ttytype'	  'tty'     'term' 的别名
'undolevels'	  'ul'	    最多可以撤销的改变个数
'verbose'	  'vbs'     给出详细信息
'verbosefile'	  'vfile'   消息写入的文件
'viewdir'	  'vdir'    :mkview 存储文件的所在目录
'viewoptions'	  'vop'     指定 :mkview 保存的内容
'viminfo'	  'vi'	    启动和退出时使用 .viminfo 文件
'wildchar'	  'wc'	    用于通配符扩展的命令行字符
'wildcharm'	  'wcm'     同 'wildchar'，但对映射情况也适用
'wildignore'	  'wig'     匹配这些模式的文件不会参与自动补全
'wildmode'	  'wim'     'wildchar' 命令行扩展所用的模式
'wildoptions'	  'wop'     指定如何完成命令行补全。
'winaltkeys'	  'wak'     何时窗口系统处理 ALT 键
'winheight'	  'wh'	    当前窗口的最少行数
'winfixheight'	  'wfh'     打开/关闭窗口时保持窗口高度
'winfixwidth'	  'wfw'     打开/关闭窗口时保持窗口宽度
'winminheight'	  'wmh'     任何窗口的最少行数
'winminwidth'	  'wmw'     任何窗口的最少列数
'winwidth'	  'wiw'     当前窗口的最少列数
'wrap'			    长行回绕并在下一行继续
'wrapmargin'	  'wm'	    使 (硬) 回绕开始的从右侧起算的字符数
'wrapscan'	  'ws'	    搜索在文件尾折回文件头
'write'			    允许写入文件
'writeany'	  'wa'	    写入文件不需 "!" 强制
'writebackup'	  'wb'	    覆盖文件时建立备份
'writedelay'	  'wd'	    每个字符延迟 (以毫秒计) (用于调试)

|:shell|	:sh[ell]	开启一个 shell
|:!|		:!{command}	通过一个 shell 执行命令 {command}
|K|		   K		用 'keywordprg' 程序 (缺省: "man") 查光标下的关键字

|:cc|		:cc [nr]	显示第 [nr] 个错误 (缺省为同一错误)
|:cnext|	:cn		显示下一个错误
|:cprevious|	:cp		显示上一个错误
|:clist|	:cl		列出所有错误
|:cquit|	:cq		退出不保存并返回错误代码 (至编译器)
|:make|		:make [args]	启动 make，读入错误，并跳转到第一个错误
|:grep|		:gr[ep] [args]	执行 'grepprg' 程序以找出匹配并跳转到首个匹配

|CTRL-G|	   CTRL-G	显示当前文件名 (包括路径) 和光标位置
|ga|		   ga		以十进制、十六进制和八进制显示当前光标下的字符的 ASCII 值
|g8|		   g8		对 utf-8 编码: 显示光标所在字符的十六进制字节序列。
|g_CTRL-G|	   g CTRL-G	显示当前光标的列、行、以及字符位置
|:version|	:ve[rsion]	显示版本信息
|:normal|	:norm[al][!] {commands} 执行普通模式命令
|Q|		Q		切换至 "Ex" 模式
|:redir|	:redir >{file}		重定向消息至文件 {file}
|:silent|	:silent[!] {command}	安静地执行 {command} 命令
|:confirm|	:confirm {command}	退出、写入等有未保存的改动或文件只读时询问。
|:browse|	:browse {command}	使用文件选择对话框打开/读入/写入文件

|c_CTRL-V|	CTRL-V {char}	   按字面插入 {char}
|c_CTRL-V|	CTRL-V {number}    输入十进制数表示的字符 (可达 3 个数位)
|c_CTRL-K|	CTRL-K {char1} {char2} 键入二合字母 (参见 |Q_di|)
|c_CTRL-R|	CTRL-R {0-9a-z"%#:-=} 插入指定寄存器的内容
|c_<Left>|	<Left>/<Right>	   光标左移/右移
|c_<S-Left>|	<S-Left>/<S-Right> 光标左移/右移一个单词
|c_CTRL-B|	CTRL-B/CTRL-E	   光标移动至命令行行首/行尾
|c_<BS>|	<BS>		   删除光标前的字符
|c_<Del>|	<Del>		   删除光标下的字符
|c_CTRL-W|	CTRL-W		   删除光标前的单词
|c_CTRL-U|	CTRL-U		   删除所有字符
|c_<Up>|	<Up>/<Down>	   搜索以当前命令行开始的较早/较晚的命令
|c_<S-Up>|	<S-Up>/<S-Down>	   从命令行历史中回忆较早/较晚的命令
|:history|	:his[tory]	   显示命令行历史
|c_CTRL-D|	CTRL-D		列出匹配光标前的模式的可能的匹配
|c_CTRL-A|	CTRL-A		插入匹配光标前的模式的所有的匹配
|c_CTRL-L|	CTRL-L		插入所有匹配当前模式的名字的最长的共同部分
|c_CTRL-N|	CTRL-N		在 'wildchar' 之后存在多个匹配时：至下一匹配
|c_CTRL-P|	CTRL-P		在 'wildchar' 之后存在多个匹配时：至上一匹配

|:range|	,		分隔两个行号
|:range|	;		同上，但在解释第二个行号之前先移动光标至第一个行号代表的行
|:range|	{number}	绝对行号
|:range|	.		当前行
|:range|	$		文件的最后一行
|:range|	%		等同于 1,$ (整个文件)
|:range|	*		等同于 '<,'> (可视区域)
|:range|	't		位置标记 t 的位置
|:range|	/{pattern}[/]	下一个匹配 {pattern} 的行
|:range|	?{pattern}[?]	前一个匹配 {pattern} 的行
|:range|	+[num]		在前面的行号上加 [num] (缺省: 1)
|:range|	-[num]		从前面的行号里减 [num] (缺省: 1)

*Q_ex*		特殊 Ex 字符
|:bar|	    |		分离两个命令 (不适用于 ":global" 及 ":!")
|:quote|    "		开始注释
|:_%|	    %		当前文件名 (仅当期望文件名时)
|:_#|	    #[num]	第 [num] 个轮换文件名 (仅当期望文件名时)
|:<cword>|  <cword>	光标下的单词 (仅当期望文件名时)
|:<cWORD>|  <cWORD>	光标下的字串 (仅当期望文件名时)
|:<cfile>|  <cfile>	光标下的文件名 (仅当期望文件名时)
|:<afile>|  <afile>	供自动命令使用的文件名 (仅当期望文件名时)
|:<sfile>|  <sfile>	":source" 的文件里该文件的文件名 (仅当期望文件名时)
		在 "%"、"#"、"<cfile>"、"<sfile>" 或 "<afile>" 之后
		|::p|	    :p		完整路径
		|::h|	    :h		头部 (除去文件名)
		|::t|	    :t		尾部 (仅使用文件名)
		|::r|	    :r		根部 (除去扩展名)
		|::e|	    :e		扩展名
		|::s|	    :s/{pat}/{repl}/	以 {repl} 替换 {pat}

*Q_st*		启动 VIM
|--|	   vim [options] -		从标准输入读入文件
|-+|	+[num]		    置光标于第 [num] 行 (缺省: 末行)
|-+c|	+{command}	    载入文件后执行命令 {command}
|-+/|	+/{pat} {file} ..   置光标于第一次出现 {pat} 的地方
|-R|	-R		    只读模式，隐含 -n
|-m|	-m		    禁止修改 (复位 'write' 选项)
|-d|	-d		    diff 模式 |diff|
|-b|	-b		    二进制模式
|-l|	-l		    lisp 模式
|-C|	-C		    兼容，置位 'compatible' 选项
|-N|	-N		    不兼容，复位 'compatible' 选项
|-r|	-r		    给出交换文件列表
|-r|	-r {file} ..	    恢复中断的编辑
|-n|	-n		    不创建交换文件
|-o|	-o [num]	    打开 [num] 个窗口 (缺省: 每个文件一个窗口)
|-f|	-f		    GUI: 前台进程，不调用 forkAmiga: 不打开新窗口启动 VIM (比如，用于 mail)
|-s|	-s {scriptin}	    先从文件 {scriptin} 读入命令
|-w|	-w {scriptout}	    把键入的字符写进文件 {scriptout} (添加)
|-W|	-W {scriptout}	    把键入的字符写进文件 {scriptout} (覆盖)
|-T|	-T {terminal}	    设置终端名
|-d|	-d {device}	    Amiga: 打开 {device} 作为控制台使用
|-u|	-u {vimrc}	    从文件 {vimrc} 而非其它文件读入初始化命令
|-U|	-U {gvimrc}	    同上，但用于启动 GUI 时
|-i|	-i {viminfo}	    从文件 {viminfo} 而不是其它文件读入信息

|:cd-|	   :cd -		回到上一次当前目录。
|:file|	   :f[ile]		显示当前文件名及光标位置。
|:file|	   :f[ile] {name}	置当前文件名为 {name}。
|:files|   :files		显示所有的轮换文件名。

|:args|	   :ar[gs]		显示参数列表，当前文件显示在 "[]" 中。
|:wn|	   :wn[ext][!]		写入当前文件并编辑下一个文件。
|:wn|	   :wn[ext][!] {file}	写到 {file} 并编辑下一个文件，除非文件 {file} 已经存在。使用 !，覆盖已存在的文件。
|:wN|	   :wN[ext][!] [file]	写入当前文件并编辑前一个文件。
|:argument|  :argu[ment] N	  :sar[gument] N	编辑第 N 个文件
|:next|	     :n[ext]		  :sn[ext]		编辑下一个文件
|:next_f|    :n[ext] {arglist}	  :sn[ext] {arglist}	定义新的文件列表并编辑其中的第一个
|:Next|	     :N[ext]		  :sN[ext]		编辑前一个文件
|:first|     :fir[st]		  :sfir[st]		编辑第一个文件
|:last|	     :la[st]		  :sla[st]		编辑最后一个文件

|viminfo-file|	启动时读入寄存器、标记、历史记录，退出时存储这些信息。
|:rviminfo|	:rv[iminfo] [file]	从文件 [file] 读入 viminfo 信息
|:rviminfo|	:rv[iminfo]! [file]	同上，但覆盖已存在的信息
|:wviminfo|	:wv[iminfo] [file]	向文件 [file] 中加入 viminfo 信息
|:wviminfo|	:wv[iminfo]! [file]	向文件 [file] 中写入 viminfo 信息

|autocommand|	特定事件发生时自动执行命令。
|:autocmd|	:au			列出所有自动命令
|:autocmd|	:au {event}		列出针对事件 {event} 的所有自动命令
|:autocmd|	:au {event} {pat}	列出针对事件 {event} 并匹配 {pat} 的所有自动命令
|:autocmd|	:au {event} {pat} {cmd}	加入针对事件 {event} 及匹配 {pat} 的新自动命令
|:autocmd|	:au!			清除所有自动命令
|:autocmd|	:au! {event}		清除所有针对事件 {event} 的自动命令
|:autocmd|	:au! * {pat}		清除所有匹配 {pat} 的自动命令
|:autocmd|	:au! {event} {pat}	清除所有针对事件 {event} 及匹配 {pat} 的自动命令
|:autocmd|	:au! {event} {pat} {cmd}  清除所有针对事件 {event} 及匹配 {pat} 的自动命令并输入新的

|:sfind|	:sf[ind] {file}		分割窗口，从 {path} 中找到文件

|CTRL-W_t|	CTRL-W t		跳转到顶端窗口              (top)
|CTRL-W_b|	CTRL-W b		跳转到底端窗口              (bottom)
|CTRL-W_p|	CTRL-W p		跳转到上一次激活的窗口      (previous)

|:buffers|	:buffers  或  :files	列出所有已知的缓冲区和文件名
|:bdelete|	:bdelete[!] [N]		从内存中卸载缓冲区 [N]  并从列表中删除

	      当前窗口内	  新窗口内	~
|:buffer|     :[N]buffer [N]	  :[N]sbuffer [N]     至参数/缓冲区 N
|:bnext|      :[N]bnext [N]	  :[N]sbnext [N]      至往后第 N 个参数/缓冲区
|:bNext|      :[N]bNext [N]	  :[N]sbNext [N]      至往前第 N 个参数/缓冲区
|:bprevious|  :[N]bprevious [N]   :[N]sbprevious [N]  至往前第 N 个参数/缓冲区
|:bfirst|     :bfirst		  :sbfirst	      至第一个参数/缓冲区
|:blast|      :blast		  :sblast	      至最后一个参数/缓冲区
|:bmodified|  :[N]bmod [N]	  :[N]sbmod [N]	      至第 N 个改动过的缓冲区

|:syn-on|	:syntax on		开始使用语法高亮
|:syn-off|	:syntax off		停止使用语法高亮
|:syn-keyword|	:syntax keyword {group-name} {keyword} ..  添加语法关键字项目
|:syn-match|	:syntax match {group-name} {pattern} ...  加入语法匹配项目
|:syn-region|	:syntax region {group-name} {pattern} ...  添加语法区域项目
|:syn-sync|	:syntax sync [ccomment | lines {N} | ...] 设置语法高亮的同步方式
|:syntax|	:syntax [list]		列出当前语法项目
|:syn-clear|	:syntax clear		清除所有语法信息
|:highlight|	:highlight clear	清除所有高亮信息
|:highlight|	:highlight {group-name} {key}={arg} ..  为语法组 {group-name} 设置高亮
|:filetype|	:filetype on		开启文件类型检测，不启用语法高亮
|:filetype|	:filetype plugin indent on 开启文件类型检测，包括自动缩进及设置

|'foldmethod'|	set foldmethod=manual	手动折叠
		set foldmethod=indent	按照缩进折叠
		set foldmethod=expr	按照表达式 'foldexpr' 折叠
		set foldmethod=syntax	按照语法区域折叠
		set foldmethod=marker	按照标志 'foldmarkers' 折叠
|zf|		zf{motion}		操作符: 手动定义一个折叠    (fold)
|:fold|		:{range}fold		将范围 {range} 包括的行定义为一个折叠
|zd|		zd			删除光标下的一个折叠        (delete)
|zD|		zD			删除光标下的所有折叠        (Delete)
|zo|		zo			打开光标下的折叠            (open)
|zO|		zO			打开光标下的所有折叠        (Open)
|zc|		zc			关闭光标下的一个折叠        (close)
|zC|		zC			关闭光标下的所有折叠        (Close)
|zm|		zm			折起更多: 减少 'foldlevel'  (more)
|zM|		zM			关闭所有折叠: 置 'foldlevel' 为 0
|zr|		zr			减少折叠: 增加 'foldlevel'  (reduce)
|zR|		zR			打开所有折叠: 置 'foldlevel' 为最大
|zn|		zn			不折叠: 复位 'foldenable'   (none)
|zN|		zN			正常折叠: 置位 'foldenable' (Normal)
|zi|		zi			反转 'foldenable'           (invert)



1. ==# 字符串比较（大小写敏感）


a

1. On select, not open in the current tab, unless it is the right.
